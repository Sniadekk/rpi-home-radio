{"version":3,"sources":["Actions/types.ts","Stores/initialState.ts","Actions/auth.ts","Functions/config.ts","Functions/requests.ts","Actions/availableSongs.ts","Actions/albums.ts","Actions/spotifySongs.ts","Actions/websocket.ts","Actions/activeSong.ts","Actions/functions.ts","Actions/user.ts","Actions/queueSongs.ts","Stores/store.ts","Reducers/auth.ts","Reducers/user.ts","Reducers/albums.ts","Reducers/spotifySongs.ts","Reducers/songsState.ts","Reducers/websocket.ts","Reducers/queueSongs.ts","Reducers/currentView.ts","Reducers/availableSongs.ts","Components/Presentational/Song.tsx","Components/Presentational/Menu.tsx","Actions/currentView.ts","Components/Containers/Login.tsx","Components/Containers/SongList.tsx","Components/Containers/MusicPlayer.tsx","Components/Containers/YoutubeSearch.tsx","Components/Containers/Config.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SongReadiness","CurrentView","TokenStatus","Action","initialState","token","spotifySongs","user","albums","activeSong","websocketConnected","songsQueue","currentView","AvailableSongs","availableSongs","convertToken","value","status","createdAt","moment","expiresAt","config","api","concat","window","location","origin","websocket","hostname","port","spotifyConnection","axios","create","baseURL","apiConnection","getAvailableSongs","_getAvailableSongs","apply","this","arguments","_callee","regenerator_default","a","wrap","_context","prev","next","abrupt","get","then","res","data","stop","_callee2","songId","isNsfw","_context2","put","nsfw","store","dispatch","parseInt","id","type","TOGGLE_AVAILABLE_SONG_NSFW","_callee3","_context3","delete","DELETE_AVAILABLE_SONG","_callee4","_context4","console","log","_callee5","userInformations","userAlbums","_context5","getUserInformations","sent","getUserAlbums","getUserFavouriteSongs","saveUserAlbums","SAVE_USER_ALBUMS","fetchUserAlbums","_fetchUserAlbums","getState","headers","Authorization","response","items","error","catch","e","_getUserAlbums","ALBUMS_FETCH_FAILED","saveSongs","songs","SAVE_SPOTIFY_SONGS","toggleSpotifySongReadiness","songFormattedName","readiness","TOGGLE_SPOTIFY_SONG_READINESS","formatName","name","artists","map","artist","join","fetchUserSongs","_x","_fetchUserSongs","paginationStatus","total","offset","item","track","isDownloaded","checkIfSongIsDownloaded","thumbnail_url","album","images","url","duration","formatted_name","isReady","READY","NOT_READY","length","_x2","_getUserFavouriteSongs","songsChunk","firstFetch","SPOTIFY_SONGS_FETCH_FAILED","songName","filter","song","ws","WebSocket","setSocketError","WS_CONNECTION_FAILED","setActiveSong","SET_ACTIVE_SONG","scheduleSong","thumbnailUrl","action","payload","send","JSON","stringify","sendSong","isObjectEmpty","obj","Object","entries","constructor","saveUserData","SAVE_USER_PROFILE","_getUserInformations","fetchUserInformations","USER_FETCH_FAILED","_fetchUserInformations","onopen","event","notification","success","message","description","WS_CONNECTION_SUCCESSFULL","onclose","onerror","onmessage","songUuid","parse","songData","nextSong","objectSpread","next_song","open","DELETE_RECENT_ACTIVE_SONG_FROM_QUEUE","queueState","queueSongs","songs_queue","scheduledSong","assign","uuid","SAVE_SONGS_IN_QUEUE","active_song","downloadedSongData","songToSave","ADD_SONGS_TO_QUEUE","addSongsToQueue","failedSong","TOGGLE_QUEUE_SONG_READINESS","toggleQueueSongReadiness","CANT_DOWNLOAD","deletedSongData","DELETE_SONG_FROM_QUEUE","loggerMiddleware","createLogger","app","combineReducers","state","undefined","SAVE_TOKEN","DELETE_TOKEN","SAVE_QUEUE_SONG_UUID","getSongFormattedName","slice","SET_VIEW","view","SAVE_AVAILABLE_SONGS","createStore","applyMiddleware","thunkMiddleware","saveAvailableSongs","formatText","maxNumberOfLetters","innerWidth","NsfwSwitch","styled","div","marginRight",".ant-switch-checked","background","SongItem","_Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","inherits","createClass","key","_this","_this$props$song","props","core_browser_esm","list","Item","className","Meta","avatar","src","title","es_button","css","fontSize","color","icon","onClick","_x3","_deleteSong","deleteSong","ScheduleSongButton","es_switch","checked","onChange","_toggleSongNsfw","toggleSongNsfw","Component","IconsContainer","SongQueueItem","_Component2","_getPrototypeOf2","_this2","_len","args","Array","_key","call","loading","setState","_this3","_this$props$song2","deleteSongFromQueue","failed","progressBar","spin","formatProgress","SpotifySongItem","_Component3","_this4","_this$props$song3","buttonMessage","DOWNLOADING","toggleSongReadiness","MainMenu","connect","_ref","setView","menu","defaultSelectedKeys","onSelect","SpotifySongs","QueueSongs","YoutubeSearch","Config","convertEnum","mode","Link","to","link","fontWeight","LoginToSpotify","linkToSpotifyAuth","href","AuthRedirection","getToken","hash","split","saveToken","Search","Input","ListStyling",".ant-spin-nested-loading","height","SongList","currentPage","searchbarValue","pageSize","innerHeight","getData","toLowerCase","includes",".ant-input-suffix","placeholder","size","target","onSearch","react_swipeable_es","onSwipedLeft","Math","ceil","onSwipedRight","locale","emptyText","Login_LoginToSpotify","bordered","itemLayout","dataSource","renderItem","Song_SongQueueItem","Song_SongItem","Song_SpotifySongItem","pagination","current","simple","showQuickJumper","SongListComponent","ButtonContainer","display","justifyContent","alignItems","ShowButton","position","top","marginLeft","left","transform","SwipeableArea","bottom","right","MusicPlayer","progress","playerVisible","isVisible","isSongSet","defineProperty","transition","padding","paddingLeft","paddingRight","onSwipedUp","onSwipedDown","MusicPlayer_ActiveSong","MusicPlayer_SkipSongButton","SkipSongButton","ActiveSong","shape","style","width","MusicPlayerContainer","SearchContainer","margin","SearchForm","paddingTop","SongSearchForm","Form","getFieldDecorator","form","_useState","useState","_useState2","slicedToArray","disabled","setDisabled","es_form","onSubmit","preventDefault","validateFields","err","values","resetFields","setTimeout","info","required","rules","input","label","initialValue","defaultChecked","htmlType","FormContainer","ConfigForm","_x4","_updateConfig","updateConfig","min","max","input_number","step","Container","Root","es","BrowserRouter","Route","path","component","AppCore","mapStateToProps","socketConnected","getTokenFromLocalStorage","localStorage","isBefore","EXPIRED","useEffect","_fetchSpotifyData","fetchSpotifyData","history","push","Switch","exact","tokenToSave","OK","add","AuthRedirectionComponent","Boolean","match","placement","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2cd60c49.chunk.js","sourcesContent":["import { Moment } from \"moment\";\nexport type Token = {\n  value: string;\n  status: TokenStatus;\n  createdAt: Moment;\n  expiresAt: Moment;\n};\n\nexport type TokenFromLocalStorage = {\n  value: string;\n  status: TokenStatus;\n  createdAt: Date;\n  expiresAt: Date;\n};\n\nexport type Album = {\n  name: string;\n  id: string;\n  images: Image[];\n  tracks: Tracks;\n};\n\nexport type PlainSong = {\n  href: string;\n  name: string;\n  artists: Artist[];\n  album: Album;\n  id: string;\n  duration: number;\n  formatted_name: string;\n  // it's gonna be used in queue to determine whether server downloaded it already or not\n  isReady: SongReadiness;\n};\n\nexport type SongContainer = {\n  created_at: Date;\n  track: PlainSong;\n};\n\nexport interface SongsRequestData extends RequestData<SongContainer> {\n  // total number of songs user added to his library, used for pagination\n  total: number;\n}\n\n// object containing informations about api to fetch albums songs\nexport type Tracks = {\n  href: string;\n  total: number;\n};\n\nexport type Image = {\n  url: string;\n};\n\n// plain song object from spotify api\n\nexport type Song = {\n  name: string;\n  artists: string;\n  id: string;\n  duration: number;\n  formatted_name: string;\n  thumbnail_url: string;\n  // it's gonna be used in queue to determine whether server downloaded it already or not\n  isReady: SongReadiness;\n  nsfw: boolean;\n  uuid?: string;\n};\n\nexport type Artist = {\n  name: string;\n};\n\nexport type User = {\n  display_name: string;\n};\n\nexport type RequestData<T> = {\n  items: T[];\n};\n\nexport type SongsState = {\n  activeSong: Song;\n  previousSongs: Song[];\n};\n\nexport type Config = {\n  frequency: number;\n};\n\n// ################## ENUMS ##################\n\nexport enum SongReadiness {\n  READY,\n  NOT_READY,\n  CANT_DOWNLOAD,\n  DOWNLOADING\n}\n\nexport enum CurrentView {\n  SpotifySongs = \"SpotifySongs\",\n  QueueSongs = \"QueueSongs\",\n  AvailableSongs = \"AvailableSongs\",\n  YoutubeSearch = \"YoutubeSearch\",\n  Config = \"Config\"\n}\n\nexport enum TokenStatus {\n  OK,\n  INVALID,\n  EXPIRED\n}\n\nexport enum Action {\n  // token actions\n  SAVE_TOKEN,\n  DELETE_TOKEN,\n  REFRESH_TOKEN,\n  // user actions\n  SAVE_USER_PROFILE,\n  USER_FETCH_FAILED,\n  // albums actions\n  SAVE_USER_ALBUMS,\n  ALBUMS_FETCH_FAILED,\n  // songs actions\n  SAVE_SONGS,\n  SPOTIFY_SONGS_FETCH_FAILED,\n  // activeSong actions\n  SET_ACTIVE_SONG,\n  // previous songs\n  PUSH_SONG,\n  POP_SONG,\n  // websocket actions\n  WS_CONNECTION_FAILED,\n  WS_CONNECTION_SUCCESSFULL,\n  // songs state\n  SAVE_SONGS_IN_QUEUE,\n  ADD_SONGS_TO_QUEUE,\n  TOGGLE_SONG_IN_QUEUE,\n  DELETE_RECENT_ACTIVE_SONG_FROM_QUEUE,\n  // current view,\n  SET_VIEW,\n  // save available songs\n  SAVE_AVAILABLE_SONGS,\n  // toggle song readiness,\n  SAVE_SPOTIFY_SONGS,\n  //\n  TOGGLE_SPOTIFY_SONG_READINESS,\n  TOGGLE_QUEUE_SONG_READINESS,\n  TOGGLE_AVAILABLE_SONG_NSFW,\n  DELETE_SONG_FROM_QUEUE,\n  OVERWRITE_QUEUE_SONG,\n  SAVE_QUEUE_SONG_UUID,\n  DELETE_AVAILABLE_SONG\n}\n","import { Song, User, Token, CurrentView } from \"../Actions/types\";\nimport { ReduxState } from \"./index\";\n\nexport const initialState: ReduxState = {\n  token: <Token>{},\n  spotifySongs: [],\n  user: <User>{},\n  albums: [],\n  activeSong: <Song>{},\n  websocketConnected: false,\n  songsQueue: [],\n  currentView: CurrentView.AvailableSongs,\n  availableSongs: []\n};\n","import { Action, TokenStatus, Token, TokenFromLocalStorage } from \"./types\";\nimport * as localStorage from \"store\";\nimport moment from \"moment\";\nimport { isObjectEmpty } from \"./index\";\n\nexport type SaveToken = {\n  type: Action.SAVE_TOKEN;\n  token: Token;\n};\nexport type DeleteToken = {\n  type: Action.DELETE_TOKEN;\n};\n\nexport type TokenAction = SaveToken | DeleteToken;\n\nfunction convertToken(token: TokenFromLocalStorage): Token {\n  return {\n    value: token.value,\n    status: token.status,\n    createdAt: moment(token.createdAt),\n    expiresAt: moment(token.expiresAt)\n  };\n}\n\nexport function getTokenFromLocalStorage(): TokenAction {\n  const token: TokenFromLocalStorage = localStorage.get(\"token\", {});\n  if (moment(token.expiresAt).isBefore(moment()) || isObjectEmpty(token)) {\n    return {\n      token: {\n        value: \"EXPIRED_TOKEN\",\n        status: TokenStatus.EXPIRED,\n        createdAt: moment(),\n        expiresAt: moment()\n      },\n      type: Action.SAVE_TOKEN\n    };\n  }\n  return {\n    token: convertToken(token),\n    type: Action.SAVE_TOKEN\n  };\n}\n\nexport function saveToken(token: string): TokenAction {\n  const tokenToSave: Token = {\n    value: token,\n    status: TokenStatus.OK,\n    createdAt: moment(),\n    expiresAt: moment().add(3600, \"seconds\")\n  };\n  // save token in local storage\n  localStorage.set(\"token\", tokenToSave);\n  return {\n    token: tokenToSave,\n    type: Action.SAVE_TOKEN\n  };\n}\n\nexport function deleteToken(): TokenAction {\n  return {\n    type: Action.DELETE_TOKEN\n  };\n}\n","export const config =\n  process.env.NODE_ENV === \"development\"\n    ? {\n        api: \"http://localhost:8080/api\",\n        websocket: \"ws://localhost:8080/api/ws/\"\n      }\n    : {\n        api: `${window.location.origin}/api`,\n        websocket: `ws://${window.location.hostname}:${\n          window.location.port\n        }/api/ws/`\n      };\n","import axios from \"axios\";\nimport {\n  getUserFavouriteSongs,\n  getUserInformations,\n  toggleAvailableSongNsfw,\n  deleteAvailableSong\n} from \"../Actions/index\";\nimport { Song, Config } from \"../Actions/types\";\nimport { store } from \"../Stores/index\";\nimport { getUserAlbums } from \"../Actions/albums\";\nimport { config } from \"./config\";\nexport const spotifyConnection = axios.create({\n  baseURL: \"https://api.spotify.com/v1\"\n});\n\n// temp solution, because somehow when I move my config to separate file it won't compile\nexport const apiConnection = axios.create({\n  baseURL: config.api\n});\n\ntype AvailableSongsResponse = {\n  data: Song[];\n};\n\nexport async function getAvailableSongs() {\n  return apiConnection\n    .get(\"/songs\")\n    .then((res: AvailableSongsResponse) => res.data);\n}\n\nexport async function toggleSongNsfw(songId: number, isNsfw: boolean) {\n  return apiConnection.put<Song>(`/songs/${songId}/${isNsfw}`).then(res => {\n    store.dispatch(\n      toggleAvailableSongNsfw(parseInt(res.data.id), res.data.nsfw)\n    );\n  });\n}\n\nexport async function deleteSong(songId: number) {\n  return apiConnection.delete(`/songs/${songId}`).then(res => {\n    store.dispatch(deleteAvailableSong(parseInt(res.data.id)));\n  });\n}\n\nexport async function updateConfig(config: Config) {\n  return apiConnection.put(\"/config\", config).then(res => {\n    console.log(res);\n  });\n}\n\n// get user data from spotify and save it in the store\nexport async function fetchSpotifyData() {\n  const userInformations = await getUserInformations();\n  const userAlbums = await getUserAlbums();\n  store.dispatch(userInformations);\n  store.dispatch(userAlbums);\n  const userSongs = await getUserFavouriteSongs(store.dispatch);\n}\n","import { Song, Action } from \"./types\";\n\ntype SaveAvailableSongs = {\n  type: Action.SAVE_AVAILABLE_SONGS;\n  songs: Song[];\n};\n\ntype ToggleAvailableSongNsfw = {\n  type: Action.TOGGLE_AVAILABLE_SONG_NSFW;\n  songId: number;\n  nsfw: boolean;\n};\n\ntype DeleteAvailableSong = {\n  type: Action.DELETE_AVAILABLE_SONG;\n  songId: number;\n};\n\nexport type AvailableSongsAction =\n  | SaveAvailableSongs\n  | ToggleAvailableSongNsfw\n  | DeleteAvailableSong;\n\n// save all songs that radio knows of\nexport function saveAvailableSongs(songs: Song[]): AvailableSongsAction {\n  return {\n    type: Action.SAVE_AVAILABLE_SONGS,\n    songs\n  };\n}\n\n//\nexport function toggleAvailableSongNsfw(\n  songId: number,\n  nsfw: boolean\n): AvailableSongsAction {\n  return {\n    type: Action.TOGGLE_AVAILABLE_SONG_NSFW,\n    songId,\n    nsfw\n  };\n}\n\nexport function deleteAvailableSong(songId: number): AvailableSongsAction {\n  return {\n    type: Action.DELETE_AVAILABLE_SONG,\n    songId\n  };\n}\n","import { Action, RequestData, Album } from \"./types\";\nimport { Result, spotifyConnection } from \"../Functions/index\";\nimport { store } from \"../Stores/index\";\n\ntype SaveUserAlbums = {\n  type: Action.SAVE_USER_ALBUMS;\n  albums: Album[];\n};\n\ntype AlbumsFetchFailed = {\n  type: Action.ALBUMS_FETCH_FAILED;\n};\n\nexport type AlbumsAction = SaveUserAlbums | AlbumsFetchFailed;\n\nexport function saveUserAlbums(albums: Album[]): AlbumsAction {\n  return {\n    albums,\n    type: Action.SAVE_USER_ALBUMS\n  };\n}\n\nexport function albumsFetchFailed(): AlbumsAction {\n  return {\n    type: Action.ALBUMS_FETCH_FAILED\n  };\n}\n\nexport async function fetchUserAlbums() {\n  const token = store.getState().token.value;\n  const albums = await spotifyConnection\n    .get<RequestData<Album>>(\"/me/playlists\", {\n      headers: {\n        Authorization: `Bearer  ${token}`\n      }\n    })\n    .then(response => {\n      const { data } = response;\n      return { value: data.items, error: false } as Result<Album[]>;\n    })\n    .catch(e => {\n      return { error: true } as Result<Album[]>;\n    });\n  return albums;\n}\n\nexport async function getUserAlbums() {\n  const albums = await fetchUserAlbums();\n  if (albums.error) {\n    return albumsFetchFailed();\n  } else {\n    return saveUserAlbums(albums.value);\n  }\n}\n","import { Action, Song, SongsRequestData, Artist, SongReadiness } from \"./types\";\nimport { Result, spotifyConnection } from \"../Functions/index\";\nimport { store } from \"../Stores/index\";\nimport { Dispatch } from \"react\";\nimport { AnyAction } from \"redux\";\n\ntype SaveSpotifySongs = {\n  type: Action.SAVE_SPOTIFY_SONGS;\n  songs: Song[];\n};\n\ntype SpotifySongsFetchFailed = {\n  type: Action.SPOTIFY_SONGS_FETCH_FAILED;\n};\n\ntype ToggleSpotifySongReadiness = {\n  type: Action.TOGGLE_SPOTIFY_SONG_READINESS;\n  // song name + artists separated by \", \"\n  songFormattedName: string;\n  readiness: SongReadiness;\n};\n\nexport type SpotifySongsAction =\n  | SaveSpotifySongs\n  | SpotifySongsFetchFailed\n  | ToggleSpotifySongReadiness;\n\nexport function saveSongs(songs: Song[]): SpotifySongsAction {\n  return {\n    songs,\n    type: Action.SAVE_SPOTIFY_SONGS\n  };\n}\n\nexport function songsFetchFailed(): SpotifySongsAction {\n  return {\n    type: Action.SPOTIFY_SONGS_FETCH_FAILED\n  };\n}\n\nexport function toggleSpotifySongReadiness(\n  songFormattedName: string,\n  readiness: SongReadiness\n): SpotifySongsAction {\n  return {\n    type: Action.TOGGLE_SPOTIFY_SONG_READINESS,\n    songFormattedName,\n    readiness\n  };\n}\n\ntype PaginationStatus = {\n  // total number of songs available\n  total: number;\n  // number of songs already downloaded\n  offset: number;\n  firstFetch: boolean;\n};\n\nfunction formatName(name: string, artists: Artist[]) {\n  return `${name} - ${artists.map(artist => artist.name).join(\", \")}`;\n}\n\nexport async function fetchUserSongs(paginationStatus: PaginationStatus) {\n  const token = store.getState().token.value;\n\n  // total number of songs\n  let total = 0;\n  const songs = await spotifyConnection\n    .get<SongsRequestData>(\n      `/me/tracks?limit=50&offset=${paginationStatus.offset}`,\n      {\n        headers: {\n          Authorization: `Bearer  ${token}`\n        }\n      }\n    )\n    .then(response => {\n      const { data } = response;\n      total = data.total;\n      // unwrap songs from song containers\n      const songs: Song[] = data.items.map(item => {\n        const { track } = item;\n        const artists = track.artists.map(artist => artist.name).join(\", \");\n        const isDownloaded = checkIfSongIsDownloaded(track.name, artists);\n        return {\n          id: track.id,\n          name: track.name,\n          thumbnail_url: track.album.images[0].url,\n          duration: track.duration / 1000,\n          formatted_name: formatName(track.name, track.artists),\n          isReady: isDownloaded ? SongReadiness.READY : SongReadiness.NOT_READY,\n          artists,\n          nsfw: true\n        };\n      });\n      return { value: songs, error: false } as Result<Song[]>;\n    })\n    .catch(e => {\n      return { error: true } as Result<Song[]>;\n    });\n\n  // calculate next offset based on the previous ones and number of songs that we just fetched\n  return { songs, total, offset: paginationStatus.offset + songs.value.length };\n}\n\nexport async function getUserFavouriteSongs(dispatch: Dispatch<AnyAction>) {\n  let paginationStatus: PaginationStatus = {\n    total: 0,\n    offset: 0,\n    firstFetch: true\n  };\n  let songs: Song[] = [];\n\n  // fetch songs until all of\n  while (\n    paginationStatus.offset < paginationStatus.total ||\n    paginationStatus.firstFetch\n  ) {\n    // fetch next chunk of songs, function might only download 50 songs at once\n    const songsChunk = await fetchUserSongs(paginationStatus);\n    // throw an error action in case of errors\n    if (songsChunk.songs.error) {\n      dispatch(songsFetchFailed());\n    } else {\n      // set new pagination status with new offset which is an index from where next function will start fetching new songs\n      paginationStatus = {\n        offset: songsChunk.offset,\n        total: songsChunk.total,\n        firstFetch: false\n      };\n      songs = songs.concat(songsChunk.songs.value);\n      dispatch(saveSongs(songs));\n    }\n  }\n}\n\n// check if spotify song is already available in the songs downloaded from the server\nfunction checkIfSongIsDownloaded(songName: string, artists: string) {\n  const availableSongs = store.getState().availableSongs;\n  return (\n    availableSongs.filter(song => {\n      return song.name === songName && song.artists === artists;\n    }).length > 0\n  );\n}\n","import { Action, Song, SongReadiness } from \"./types\";\nimport { store } from \"../Stores/index\";\nimport {\n  setActiveSong,\n  deleteQueueSong,\n  toggleSpotifySongReadiness\n} from \"./index\";\nimport {\n  saveSongsInQueue,\n  deleteRecentActiveSongFromQueue,\n  toggleQueueSongReadiness\n} from \"./index\";\nimport { notification } from \"antd\";\nimport { addSongsToQueue } from \"./queueSongs\";\nimport { config } from \"../Functions\";\n// experimental\nexport let ws = new WebSocket(config.websocket);\n\ntype WSAction = {\n  action: string;\n  success: boolean;\n  value: any;\n};\n\ntype SocketSuccessfullConection = {\n  type: Action.WS_CONNECTION_SUCCESSFULL;\n};\n\ntype SocketConnectionError = {\n  type: Action.WS_CONNECTION_FAILED;\n};\n\nexport type SocketAction = SocketSuccessfullConection | SocketConnectionError;\n\nfunction setSocketConnected(): SocketAction {\n  return {\n    type: Action.WS_CONNECTION_SUCCESSFULL\n  };\n}\n\nfunction setSocketError(): SocketAction {\n  return {\n    type: Action.WS_CONNECTION_FAILED\n  };\n}\n\nlet isSocketOpened = false;\n\nws.onopen = event => {\n  isSocketOpened = true;\n  notification.success({\n    message: \"Connection\",\n    description: \"Successfully connected to the home-fm-server.\"\n  });\n  store.dispatch(setSocketConnected());\n};\n\nws.onclose = event => {\n  isSocketOpened = false;\n  notification.error({\n    message: \"Connection\",\n    description: \"Diconnected from home-fm-server\"\n  });\n  store.dispatch(setSocketError());\n};\n\nws.onerror = event => {\n  notification.error({\n    message: \"Connection\",\n    duration: 10,\n    description: \"home-fm-server isn't turned on\"\n  });\n  store.dispatch(setSocketError());\n};\n\ntype Data<T> = {\n  value: T;\n};\n\ntype NextSong = {\n  next_song: Song;\n};\n\ntype ScheduledSong = {\n  song: Song;\n  uuid: string;\n  // there is also requested_at, but we don't need it atm.\n};\n\ntype QueueState = {\n  active_song: Song;\n  songs_queue: ScheduledSong[];\n};\n\n// it needs to be simplified\nws.onmessage = event => {\n  const data: WSAction = JSON.parse(event.data);\n  switch (data.action) {\n    case \"next_song\":\n      const songData: NextSong = data.value;\n      // imit formatted name\n      const nextSong: Song = {\n        ...songData.next_song,\n        formatted_name: `${songData.next_song.name} - ${\n          songData.next_song.artists\n        }`\n      };\n      notification.open({\n        message: \"Now playing\",\n        description: `${nextSong.name} - ${nextSong.artists}`\n      });\n      handleNextSong(nextSong);\n      store.dispatch(deleteRecentActiveSongFromQueue());\n      break;\n    case \"queue_state\":\n      let queueState: QueueState = data.value;\n      const queue = queueState.songs_queue;\n      const queueSongs = queue.map(scheduledSong => {\n        return Object.assign({}, scheduledSong.song, {\n          uuid: scheduledSong.uuid\n        });\n      });\n      store.dispatch(saveSongsInQueue(queueSongs));\n      let activeSong: Song = queueState.active_song;\n      store.dispatch(setActiveSong(activeSong));\n      return;\n    case \"song_download_finished\":\n      const downloadedSongData: Data<ScheduledSong> = data;\n      // imit formatted name\n      const songFormattedName = `${downloadedSongData.value.song.name} - ${\n        downloadedSongData.value.song.artists\n      }`;\n      const { song } = downloadedSongData.value;\n      const songToSave = { ...song, uuid: downloadedSongData.value.uuid };\n      //  store.dispatch(\n      //    toggleQueueSongReadiness(songFormattedName, SongReadiness.READY)\n      //   );\n      // store.dispatch(saveQueueSongUuid(songFormattedName, uuid));\n      store.dispatch(addSongsToQueue([songToSave]));\n      store.dispatch(\n        toggleSpotifySongReadiness(songFormattedName, SongReadiness.READY)\n      );\n\n      return;\n    case \"song_download_failed\":\n      let failedSong: Song = data.value;\n      store.dispatch(\n        toggleQueueSongReadiness(\n          failedSong.formatted_name,\n          SongReadiness.CANT_DOWNLOAD\n        )\n      );\n      store.dispatch(\n        toggleSpotifySongReadiness(\n          failedSong.formatted_name,\n          SongReadiness.CANT_DOWNLOAD\n        )\n      );\n      return;\n    case \"delete_song_from_queue\":\n      // data containing deleted song's uuid\n      const deletedSongData: Data<string> = data;\n      store.dispatch(deleteQueueSong(deletedSongData.value));\n    case \"song_download_started\":\n      break;\n    default:\n  }\n};\n\nfunction handleNextSong(song: Song) {\n  store.dispatch(setActiveSong(song));\n}\n\nexport function sendSong(\n  songName: string,\n  artists: string,\n  thumbnailUrl: string,\n  nsfw: boolean\n) {\n  const data = {\n    action: \"request_song\",\n    payload: {\n      artists,\n      name: songName,\n      thumbnail_url: thumbnailUrl,\n      nsfw\n    }\n  };\n  ws.send(JSON.stringify(data));\n}\n\nexport function skipSong() {\n  const data = {\n    action: \"skip_song\",\n    payload: {}\n  };\n  ws.send(JSON.stringify(data));\n}\n\nexport function deleteSongFromQueue(songUuid: string) {\n  const data = {\n    action: \"delete_song_from_queue\",\n    payload: {\n      uuid: songUuid\n    }\n  };\n  ws.send(JSON.stringify(data));\n}\n\nfunction convertSongs(songs: Song[]) {}\n","import { Action, Song } from \"./types\";\nimport { sendSong } from \"./websocket\";\n\nexport type SetActiveSong = {\n  type: Action.SET_ACTIVE_SONG;\n  song: Song;\n};\n\nexport type ActiveSongAction = SetActiveSong;\n\n// if pushToHistory equals true then song will be pushed to previousSongs array\nexport function setActiveSong(song: Song): ActiveSongAction {\n  // whether we want to notify server about incoming song or not\n  return {\n    song,\n    type: Action.SET_ACTIVE_SONG\n  };\n}\n\nexport function scheduleSong(song: Song) {\n  sendSong(song.name, song.artists, song.thumbnail_url, song.nsfw);\n}\n","import { Song } from \"./types\";\n\n// returns a number between min and max range\nexport function randomNumber(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nexport function isObjectEmpty(obj: any) {\n  if (obj === null) {\n    return true;\n  }\n  return Object.entries(obj).length === 0 && obj.constructor === Object;\n}\n\nexport function getSongFormattedName(song: Song): string {\n  return `${song.name} - ${song.artists}`;\n}\n","import { Action, User } from \"./types\";\nimport { Result, spotifyConnection } from \"../Functions/index\";\nimport { store } from \"../Stores/index\";\n\ntype SaveUserData = {\n  user: User;\n  type: Action.SAVE_USER_PROFILE;\n};\n\ntype UserFetchFailed = {\n  type: Action.USER_FETCH_FAILED;\n};\n\nexport type UserAction = SaveUserData | UserFetchFailed;\n\nexport function saveUserData(user: User): UserAction {\n  return {\n    user,\n    type: Action.SAVE_USER_PROFILE\n  };\n}\n\nexport function userFetchFailed(): UserAction {\n  return {\n    type: Action.USER_FETCH_FAILED\n  };\n}\n\nexport async function getUserInformations(): Promise<UserAction> {\n  const user = await fetchUserInformations();\n  if (user.error) {\n    return userFetchFailed();\n  } else {\n    return saveUserData(user.value);\n  }\n}\n\nexport async function fetchUserInformations() {\n  const token = store.getState().token.value;\n  const user = await spotifyConnection\n    .get<User>(\"/me\", {\n      headers: {\n        Authorization: `Bearer  ${token}`\n      }\n    })\n    .then(response => {\n      const { data } = response;\n      return { value: data, error: false } as Result<User>;\n    })\n    .catch(e => {\n      return { error: true } as Result<User>;\n    });\n  return user;\n}\n","import { Action, Song, SongReadiness } from \"./types\";\n\nexport type ToggleQueueSongReadiness = {\n  type: Action.TOGGLE_QUEUE_SONG_READINESS;\n  isReady: SongReadiness;\n  // song name + artists separated by \", \"\n  songFormattedName: string;\n};\n\nexport type DeleteRecentActiveSong = {\n  type: Action.DELETE_RECENT_ACTIVE_SONG_FROM_QUEUE;\n};\n\nexport type SaveQueueSongs = {\n  type: Action.SAVE_SONGS_IN_QUEUE;\n  songs: Song[];\n};\n\nexport type AddSongs = {\n  type: Action.ADD_SONGS_TO_QUEUE;\n  songs: Song[];\n};\n\nexport type DeleteSongFromQueue = {\n  type: Action.DELETE_SONG_FROM_QUEUE;\n  songUuid: string;\n};\n\nexport type SaveQueueSongUuid = {\n  type: Action.SAVE_QUEUE_SONG_UUID;\n  uuid: string;\n  songFormattedName: string;\n};\n\nexport type SongsQueueAction =\n  | SaveQueueSongs\n  | AddSongs\n  | ToggleQueueSongReadiness\n  | DeleteRecentActiveSong\n  | DeleteSongFromQueue\n  | SaveQueueSongUuid;\n\nexport function addSongsToQueue(songs: Song[]): SongsQueueAction {\n  return {\n    type: Action.ADD_SONGS_TO_QUEUE,\n    songs\n  };\n}\n\nexport function saveSongsInQueue(songs: Song[]): SongsQueueAction {\n  return {\n    type: Action.SAVE_SONGS_IN_QUEUE,\n    songs\n  };\n}\n\nexport function deleteRecentActiveSongFromQueue(): SongsQueueAction {\n  return {\n    type: Action.DELETE_RECENT_ACTIVE_SONG_FROM_QUEUE\n  };\n}\n\nexport function saveQueueSongUuid(\n  songFormattedName: string,\n  uuid: string\n): SongsQueueAction {\n  return {\n    type: Action.SAVE_QUEUE_SONG_UUID,\n    uuid,\n    songFormattedName\n  };\n}\n// toggle song\nexport function toggleQueueSongReadiness(\n  songFormattedName: string,\n  isReady: SongReadiness\n): SongsQueueAction {\n  return {\n    type: Action.TOGGLE_QUEUE_SONG_READINESS,\n    isReady,\n    songFormattedName\n  };\n}\n\nexport function deleteQueueSong(songUuid: string): SongsQueueAction {\n  return {\n    type: Action.DELETE_SONG_FROM_QUEUE,\n    songUuid\n  };\n}\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport {\n  token,\n  user,\n  albums,\n  spotifySongs,\n  activeSong,\n  websocketConnected,\n  songsQueue,\n  currentView,\n  availableSongs\n} from \"../Reducers/index\";\nimport { initialState } from \"./index\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport { getAvailableSongs } from \"../Functions\";\nimport { saveAvailableSongs } from \"../Actions/availableSongs\";\n\nconst loggerMiddleware = createLogger();\n\n// make function with initial stuff to do\nconst app = combineReducers({\n  token,\n  user,\n  albums,\n  spotifySongs,\n  activeSong,\n  websocketConnected,\n  songsQueue,\n  currentView,\n  availableSongs\n});\n\nexport const store = createStore(\n  app,\n  initialState,\n  applyMiddleware(thunkMiddleware, loggerMiddleware)\n);\n\n// fetch data from API\n\ngetAvailableSongs().then(songs => {\n  store.dispatch(saveAvailableSongs(songs));\n});\n","import { Action, Token } from \"../Actions/types\";\nimport { TokenAction } from \"../Actions/auth\";\n\nexport function token(state: Token = {} as Token, action: TokenAction): Token {\n  switch (action.type) {\n    case Action.SAVE_TOKEN:\n      return action.token;\n    case Action.DELETE_TOKEN:\n      return {} as Token;\n    default:\n      return state;\n  }\n}\n","import { Action, User } from \"../Actions/types\";\nimport { UserAction } from \"../Actions/user\";\n\nexport function user(state: User = {} as User, action: UserAction): User {\n  switch (action.type) {\n    case Action.SAVE_USER_PROFILE:\n      return action.user;\n    case Action.USER_FETCH_FAILED:\n    default:\n      return state;\n  }\n}\n","import { Action, Album } from \"../Actions/types\";\nimport { AlbumsAction } from \"../Actions/albums\";\n\nexport function albums(state: Album[] = [], action: AlbumsAction): Album[] {\n  switch (action.type) {\n    case Action.SAVE_USER_ALBUMS:\n      return action.albums;\n    case Action.ALBUMS_FETCH_FAILED:\n      return [];\n    default:\n      return state;\n  }\n}\n","import { Action, Song } from \"../Actions/types\";\nimport { SpotifySongsAction } from \"../Actions/spotifySongs\";\n\nexport function spotifySongs(\n  state: Song[] = [],\n  action: SpotifySongsAction\n): Song[] {\n  switch (action.type) {\n    case Action.SAVE_SPOTIFY_SONGS:\n      return action.songs;\n    case Action.SPOTIFY_SONGS_FETCH_FAILED:\n      return [];\n    case Action.TOGGLE_SPOTIFY_SONG_READINESS:\n      // find song with given ID and change it's readiness\n      return state.map(song => {\n        if (song.formatted_name === action.songFormattedName) {\n          return Object.assign({}, song, { isReady: action.readiness });\n        } else {\n          return song;\n        }\n      });\n    default:\n      return state;\n  }\n}\n","import { Song, Action } from \"../Actions/types\";\nimport { ActiveSongAction } from \"../Actions/activeSong\";\n\nexport function activeSong(\n  state: Song = {} as Song,\n  action: ActiveSongAction\n): Song {\n  switch (action.type) {\n    case Action.SET_ACTIVE_SONG:\n      return action.song;\n    default:\n      return state;\n  }\n}\n","import { Action } from \"../Actions/types\";\nimport { SocketAction } from \"../Actions/websocket\";\n\n// websocket connection\n\nexport function websocketConnected(\n  state: boolean = false,\n  action: SocketAction\n): boolean {\n  switch (action.type) {\n    case Action.WS_CONNECTION_FAILED:\n      return false;\n    case Action.WS_CONNECTION_SUCCESSFULL:\n      return true;\n    default:\n      return state;\n  }\n}\n","import { Action, Song } from \"../Actions/types\";\nimport { SongsQueueAction } from \"../Actions/queueSongs\";\nimport { getSongFormattedName } from \"../Actions\";\n\nexport function songsQueue(\n  state: Song[] = [],\n  action: SongsQueueAction\n): Song[] {\n  switch (action.type) {\n    case Action.ADD_SONGS_TO_QUEUE:\n      return state.concat(action.songs);\n    case Action.TOGGLE_QUEUE_SONG_READINESS:\n      return state.map((song: Song) => {\n        if (song.formatted_name == action.songFormattedName) {\n          return {\n            ...song,\n            isReady: action.isReady\n          };\n        } else {\n          return song;\n        }\n      });\n    case Action.SAVE_QUEUE_SONG_UUID:\n      return state.map(song => {\n        if (getSongFormattedName(song) === action.songFormattedName) {\n          return Object.assign({}, song, { uuid: action.uuid });\n        } else {\n          return song;\n        }\n      });\n    case Action.DELETE_SONG_FROM_QUEUE:\n      return state.filter(song => song.uuid !== action.songUuid);\n    // this overrides whole array of songs\n    case Action.SAVE_SONGS_IN_QUEUE:\n      return action.songs;\n    case Action.DELETE_RECENT_ACTIVE_SONG_FROM_QUEUE:\n      if (state.length > 0) {\n        return state.slice(1, state.length);\n      } else {\n        return state;\n      }\n    default:\n      return state;\n  }\n}\n","import { CurrentView, Action } from \"../Actions/types\";\nimport { CurrentViewAction } from \"../Actions/currentView\";\n\nexport function currentView(\n  state: CurrentView = CurrentView.AvailableSongs,\n  action: CurrentViewAction\n): CurrentView {\n  switch (action.type) {\n    case Action.SET_VIEW:\n      return action.view;\n    default:\n      return state;\n  }\n}\n","import { Action, Song } from \"../Actions/types\";\nimport { AvailableSongsAction } from \"../Actions/availableSongs\";\n\nexport function availableSongs(\n  state: Song[] = [],\n  action: AvailableSongsAction\n): Song[] {\n  switch (action.type) {\n    case Action.SAVE_AVAILABLE_SONGS:\n      return action.songs;\n    case Action.TOGGLE_AVAILABLE_SONG_NSFW:\n      // create new array of songs with song that has nsfw toggled\n      return state.map(song => {\n        if (parseInt(song.id) === action.songId) {\n          return Object.assign({}, song, { nsfw: action.nsfw });\n        } else {\n          return song;\n        }\n      });\n    case Action.DELETE_AVAILABLE_SONG:\n      return state.filter(song => parseInt(song.id) !== action.songId);\n    default:\n      return state;\n  }\n}\n","/** @jsx jsx */\n\nimport React, { Component } from \"react\";\nimport { Song, Artist, SongReadiness } from \"../../Actions/types\";\nimport { List, Avatar, Icon, Switch, Button } from \"antd\";\nimport { jsx, css } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\nimport { toggleSongNsfw, deleteSong } from \"../../Functions/index\";\nimport { deleteSongFromQueue } from \"../../Actions/websocket\";\n\ninterface SongProps {\n  song: Song;\n  setActiveSong: (song: Song) => void;\n}\n\nexport function formatArtists(artists: Artist[]) {\n  return artists\n    .slice(0, 3)\n    .map(artist => artist.name)\n    .join(\", \");\n}\n\nfunction formatText(description: string) {\n  const maxNumberOfLetters = window.innerWidth / 25;\n  if (description.length > maxNumberOfLetters) {\n    return `${description.slice(0, maxNumberOfLetters)}...`;\n  } else {\n    return description;\n  }\n}\n\nconst NsfwSwitch = styled.div({\n  marginRight: \"1rem\",\n  \".ant-switch-checked\": {\n    background: \"#e83752\"\n  }\n});\nexport class SongItem extends Component<SongProps> {\n  render() {\n    const { artists, nsfw, id } = this.props.song;\n    return (\n      <List.Item className=\"list-item-song\">\n        <List.Item.Meta\n          avatar={<Avatar src={this.props.song.thumbnail_url} />}\n          title={\n            <span className=\"song-name\">\n              {formatText(this.props.song.name)}\n            </span>\n          }\n          description={formatText(artists)}\n        />\n        <Button\n          // it is not a link, but link comes without borders and that is what I need\n          type=\"link\"\n          css={{ fontSize: \"24px\", color: \"#e83752\", marginRight: \"1rem\" }}\n          title=\"Delete from radio database\"\n          icon={\"delete\"}\n          onClick={() => {\n            deleteSong(parseInt(id));\n          }}\n        />\n        <Button\n          onClick={() => {\n            this.props.setActiveSong(this.props.song);\n          }}\n          css={ScheduleSongButton}\n        >\n          Schedule\n        </Button>\n        <NsfwSwitch title=\"is it safe for random play?\">\n          <Switch\n            checked={nsfw}\n            onChange={(isNsfw: boolean) => {\n              toggleSongNsfw(parseInt(id), isNsfw);\n            }}\n          >\n            NSFW\n          </Switch>\n        </NsfwSwitch>\n      </List.Item>\n    );\n  }\n}\n\nconst IconsContainer = styled.div({\n  marginRight: \"0.7rem\"\n});\n\nexport class SongQueueItem extends Component<SongProps> {\n  state = {\n    loading: false\n  };\n\n  componentWillReceiveProps(props: SongProps) {\n    if (this.props.song.uuid !== props.song.uuid) {\n      this.setState({ loading: false });\n    }\n  }\n\n  render() {\n    const { artists, uuid } = this.props.song;\n    return (\n      <List.Item className=\"list-item-song\">\n        <List.Item.Meta\n          avatar={<Avatar src={this.props.song.thumbnail_url} />}\n          title={\n            <span className=\"song-name\">\n              {formatText(this.props.song.name)}\n            </span>\n          }\n          description={formatText(artists)}\n        />\n        <IconsContainer>\n          <Button\n            // it is not a link, but link comes without borders and that is what I need\n            loading={this.state.loading}\n            type=\"link\"\n            css={{ fontSize: \"24px\", color: \"#e83752\" }}\n            title=\"Delete from queue\"\n            icon={\"delete\"}\n            onClick={() => {\n              if (typeof uuid !== \"undefined\") {\n                deleteSongFromQueue(uuid);\n                this.setState({ loading: true });\n              }\n            }}\n          />\n          {formatProgress(this.props.song.isReady)}\n        </IconsContainer>\n      </List.Item>\n    );\n  }\n}\n\nconst ScheduleSongButton = css({\n  marginRight: \"1rem\"\n});\n\ntype SpotifySongProps = {\n  toggleSongReadiness: (\n    songFormattedName: string,\n    readiness: SongReadiness\n  ) => void;\n};\nexport class SpotifySongItem extends Component<SongProps & SpotifySongProps> {\n  render() {\n    const { artists, isReady, id } = this.props.song;\n    const buttonMessage = (() => {\n      switch (isReady) {\n        case SongReadiness.READY:\n          return \"Schedule\";\n        case SongReadiness.DOWNLOADING:\n          return \"Downloading...\";\n        case SongReadiness.NOT_READY:\n          return \"Download and schedule\";\n      }\n    })();\n\n    return (\n      <List.Item className=\"list-item-song\">\n        <List.Item.Meta\n          avatar={<Avatar src={this.props.song.thumbnail_url} />}\n          title={\n            <span className=\"song-name\">\n              {formatText(this.props.song.name)}\n            </span>\n          }\n          description={formatText(artists)}\n        />\n        <Button\n          loading={isReady === SongReadiness.DOWNLOADING}\n          type={isReady === SongReadiness.READY ? \"primary\" : \"default\"}\n          onClick={() => {\n            // if song isn't already downloaded, activate loading on it until server is done downloading it\n            if (isReady !== SongReadiness.READY) {\n              this.props.toggleSongReadiness(\n                this.props.song.formatted_name,\n                SongReadiness.DOWNLOADING\n              );\n            }\n            this.props.setActiveSong(this.props.song);\n          }}\n          css={[\n            ScheduleSongButton\n            // if song is available on the server already - paint this button green\n          ]}\n        >\n          {buttonMessage}\n        </Button>\n      </List.Item>\n    );\n  }\n}\n\nconst failed = css({\n  color: \"#ba252f\"\n});\n\nconst success = css({\n  color: \"#15c455\"\n});\n\nconst progressBar = css({\n  fontSize: 24\n});\n\nfunction formatProgress(readiness: SongReadiness) {\n  switch (readiness) {\n    case SongReadiness.CANT_DOWNLOAD:\n      return (\n        <Icon\n          title=\"Song can't be downloaded\"\n          type=\"close-circle\"\n          css={[failed, progressBar]}\n        />\n      );\n    case SongReadiness.NOT_READY:\n      return (\n        <Icon\n          title=\"Downloading song\"\n          type=\"loading\"\n          css={[progressBar]}\n          spin\n        />\n      );\n    case SongReadiness.READY:\n      return (\n        <Icon\n          type=\"check-circle\"\n          title=\"Song successfully downloaded\"\n          css={[success, progressBar]}\n        />\n      );\n  }\n}\n","/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\n\nimport React, { FunctionComponent } from \"react\";\nimport { Menu } from \"antd\";\nimport { CurrentView } from \"../../Actions/types\";\nimport { ReduxState } from \"../../Stores\";\nimport { Dispatch } from \"redux\";\nimport { setView } from \"../../Actions/currentView\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\ntype MenuProps = {\n  setView: (view: CurrentView) => void;\n  currentView: CurrentView;\n};\n\nfunction convertEnum(key: string): CurrentView {\n  switch (key) {\n    case \"SpotifySongs\":\n      return CurrentView.SpotifySongs;\n    case \"QueueSongs\":\n      return CurrentView.QueueSongs;\n    case \"YoutubeSearch\":\n      return CurrentView.YoutubeSearch;\n    case \"AvailableSongs\":\n      return CurrentView.AvailableSongs;\n    case \"Config\":\n      return CurrentView.Config;\n    default:\n      return CurrentView.AvailableSongs;\n  }\n}\n\nconst MenuComponent: FunctionComponent<MenuProps> = (props: MenuProps) => {\n  return (\n    <Menu\n      defaultSelectedKeys={[CurrentView.AvailableSongs]}\n      onSelect={e => {\n        let view = convertEnum(e.key);\n        props.setView(view);\n      }}\n      mode=\"horizontal\"\n    >\n      <Menu.Item key={CurrentView.SpotifySongs}>\n        <Link to=\"/songs/spotify\">Spotify songs</Link>\n      </Menu.Item>\n      <Menu.Item key={CurrentView.QueueSongs}>\n        <Link to=\"/songs/queue\">Songs queue</Link>\n      </Menu.Item>\n      <Menu.Item key={CurrentView.AvailableSongs}>\n        <Link to=\"/songs/available\">Available songs</Link>\n      </Menu.Item>\n      <Menu.Item key={CurrentView.YoutubeSearch}>\n        <Link to=\"/youtube_search\">Search on youtube</Link>\n      </Menu.Item>\n      <Menu.Item key={CurrentView.Config}>\n        <Link to=\"/config\">Config</Link>\n      </Menu.Item>\n    </Menu>\n  );\n};\n\nconst mapStateToProps = ({ currentView }: ReduxState) => {\n  return {\n    currentView\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    setView: (view: CurrentView) => dispatch(setView(view))\n  };\n};\n\nexport const MainMenu = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MenuComponent);\n","import { Action, CurrentView } from \"./types\";\n\nexport type SetView = {\n  type: Action.SET_VIEW;\n  view: CurrentView;\n};\n\nexport type CurrentViewAction = SetView;\n\nexport function setView(view: CurrentView): CurrentViewAction {\n  return {\n    type: Action.SET_VIEW,\n    view\n  };\n}\n","/** @jsx jsx */\n\nimport React, { Component } from \"react\";\nimport { jsx, css } from \"@emotion/core\";\nimport { RouteComponentProps } from \"react-router\";\n\ninterface AuthProps extends RouteComponentProps {\n  saveToken: (token: string) => void;\n}\n\nconst link = css({\n  fontSize: \"1.3rem\",\n  fontWeight: \"bold\"\n});\n\nexport const LoginToSpotify = () => {\n  const clientId = \"d09edd82dac149a5b6f076515368e06d\";\n  const responseType = \"token\";\n  const redirectURL = `http:://rusty-radio:8080/auth`;\n  const linkToSpotifyAuth = `https://accounts.spotify.com/authorize?client_id=${clientId}&redirect_uri=${redirectURL}&response_type=${responseType}&scope=user-library-read`;\n\n  return (\n    <a css={link} href={linkToSpotifyAuth}>\n      Login to your spotify account\n    </a>\n  );\n};\n\nexport class AuthRedirection extends Component<AuthProps> {\n  componentDidMount() {\n    this.getToken(this.props);\n  }\n  getToken = (props: AuthProps) => {\n    //get token from hash after redirection from spotify login page, after splitting it by = split it by & to remove next query parameter from it\n    const queryParams =\n      props.location.hash === undefined ? \"\" : props.location.hash;\n    const rawToken = queryParams.split(\"=\")[1] || \"\";\n    // token to return\n    const token = rawToken.split(\"&\")[0] || \"\";\n    // save token to global store\n    this.props.saveToken(token);\n  };\n\n  render() {\n    return <div>Authenticated</div>;\n  }\n}\n","/** @jsx jsx */\n\nimport React, { Component } from \"react\";\nimport { Song, CurrentView, SongReadiness } from \"../../Actions/types\";\nimport { SongItem } from \"../Presentational/index\";\nimport { connect } from \"react-redux\";\nimport { ReduxState } from \"../../Stores/index\";\nimport { List, Menu, Input, notification } from \"antd\";\nimport { Dispatch } from \"redux\";\nimport { SongQueueItem, SpotifySongItem } from \"../Presentational/index\";\nimport { jsx, css } from \"@emotion/core\";\nimport {\n  scheduleSong,\n  toggleSpotifySongReadiness,\n  addSongsToQueue\n} from \"../../Actions/index\";\nimport { LoginToSpotify } from \"./Login\";\nimport { useSwipeable, Swipeable } from \"react-swipeable\";\n\nconst Search = Input.Search;\ntype SongListProps = {\n  spotifySongs: Song[];\n  availableSongs: Song[];\n  songsQueue: Song[];\n  setActiveSong: (song: Song) => void;\n  toggleSongReadiness: (\n    songFormattedName: string,\n    songReadiness: SongReadiness\n  ) => void;\n  currentView: CurrentView;\n};\n\ntype SongListState = {\n  currentPage: number;\n  searchbarValue: string;\n};\n\nconst ListStyling = css({\n  \".ant-spin-nested-loading\": {\n    height: \"80vh\"\n  }\n});\n\nclass SongList extends Component<SongListProps, SongListState> {\n  state = {\n    currentPage: 1,\n    searchbarValue: \"\",\n    pageSize: window.innerHeight / 100\n  };\n\n  getData = (songs: Song[]) => {\n    if (this.state.searchbarValue.length === 0) {\n      return songs;\n    }\n    return songs.filter(song => {\n      const songName = song.name.toLowerCase();\n      const artists = song.artists.toLowerCase();\n      return (\n        songName.includes(this.state.searchbarValue) ||\n        artists.includes(this.state.searchbarValue)\n      );\n    });\n  };\n\n  render() {\n    const songs = (() => {\n      switch (this.props.currentView) {\n        case CurrentView.QueueSongs:\n          return this.getData(this.props.songsQueue);\n        case CurrentView.SpotifySongs:\n          return this.getData(this.props.spotifySongs);\n        case CurrentView.AvailableSongs:\n          return this.getData(this.props.availableSongs);\n        default:\n          return this.getData(this.props.availableSongs);\n      }\n    })();\n    return (\n      <div>\n        <Search\n          css={{\n            \".ant-input-suffix\": {\n              marginRight: \"1rem\"\n            }\n          }}\n          placeholder=\"filter songs...\"\n          size=\"default\"\n          name=\"domains\"\n          value={this.state.searchbarValue}\n          onChange={(e: any) => {\n            const { value } = e.target;\n            this.setState({ searchbarValue: value });\n          }}\n          onSearch={(name: string) => {\n            if (name.length == 0) {\n              return;\n            }\n          }}\n        />\n        <Swipeable\n          onSwipedLeft={e => {\n            if (\n              Math.ceil(songs.length / this.state.pageSize) <\n              this.state.currentPage + 1\n            ) {\n              return;\n            } else {\n              this.setState({ currentPage: this.state.currentPage + 1 });\n            }\n          }}\n          onSwipedRight={e => {\n            if (this.state.currentPage - 1 <= 0) {\n              return;\n            } else {\n              this.setState({ currentPage: this.state.currentPage - 1 });\n            }\n          }}\n        >\n          <List\n            locale={{\n              emptyText:\n                this.props.currentView === CurrentView.SpotifySongs ? (\n                  <LoginToSpotify />\n                ) : (\n                  \"There are no songs available\"\n                )\n            }}\n            css={ListStyling}\n            bordered={false}\n            size={\"large\"}\n            itemLayout=\"horizontal\"\n            dataSource={songs}\n            renderItem={(song: Song) => {\n              switch (this.props.currentView) {\n                case CurrentView.QueueSongs:\n                  return (\n                    <SongQueueItem\n                      setActiveSong={this.props.setActiveSong}\n                      song={song}\n                    />\n                  );\n                case CurrentView.AvailableSongs:\n                  return (\n                    <SongItem\n                      setActiveSong={this.props.setActiveSong}\n                      song={song}\n                    />\n                  );\n                case CurrentView.SpotifySongs:\n                  return (\n                    <SpotifySongItem\n                      toggleSongReadiness={this.props.toggleSongReadiness}\n                      setActiveSong={this.props.setActiveSong}\n                      song={song}\n                    />\n                  );\n                default:\n                  return (\n                    <SongItem\n                      setActiveSong={this.props.setActiveSong}\n                      song={song}\n                    />\n                  );\n              }\n            }}\n            pagination={{\n              current: this.state.currentPage,\n              total: songs.length,\n              pageSize: this.state.pageSize,\n              simple: true,\n              showQuickJumper: true,\n              onChange: currentPage => this.setState({ currentPage })\n            }}\n          />\n        </Swipeable>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: ReduxState) => {\n  return {\n    spotifySongs: state.spotifySongs,\n    songsQueue: state.songsQueue,\n    currentView: state.currentView,\n    availableSongs: state.availableSongs\n  };\n};\n\nconst dispatchToProps = (dispatch: Dispatch) => {\n  return {\n    setActiveSong: (song: Song) => {\n      // set song to be active, true indicates that we want to download it\n      notification.success({\n        description: song.formatted_name,\n        message: \"Successfully scheduled\",\n        duration: window.innerWidth >= 576 ? 2 : 1\n      });\n      scheduleSong(song);\n      // dispatch(addSongsToQueue([song]));\n    },\n    toggleSongReadiness: (songId: string, readiness: SongReadiness) => {\n      dispatch(toggleSpotifySongReadiness(songId, readiness));\n    }\n  };\n};\n\nconst SongListComponent = connect(\n  mapStateToProps,\n  dispatchToProps\n)(SongList);\n\nexport { SongListComponent as SongList };\n","/** @jsx jsx */\n\nimport { jsx, css, keyframes } from \"@emotion/core\";\nimport React, { Component } from \"react\";\nimport { isObjectEmpty, skipSong } from \"../../Actions/index\";\nimport { Song } from \"../../Actions/types\";\nimport { Avatar, Button } from \"antd\";\nimport styled from \"@emotion/styled\";\nimport { ReduxState } from \"../../Stores\";\nimport { connect } from \"react-redux\";\nimport { Swipeable } from \"react-swipeable\";\n\nconst breakpoint = `@media (min-width: 1024px)`;\n\nconst ButtonContainer = styled.div({\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  height: \"100%\"\n});\n\nconst MusicPlayerStyling = (isVisible: boolean) =>\n  css({\n    position: \"fixed\",\n    bottom: isVisible ? \"0rem\" : \"-5rem\",\n    transition: \"bottom 0.3s linear\",\n    left: 0,\n    right: 0,\n    height: \"5rem\",\n    padding: \"1.25rem\",\n    background: \"#282828\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    [breakpoint]: {\n      paddingLeft: \"1.5rem\",\n      paddingRight: \"4rem\"\n    }\n  });\n\nconst ShowButton = css({\n  position: \"absolute\",\n  top: \"-3rem\",\n  marginLeft: \"auto\",\n  marginRight: \"auto\",\n  left: \"5%\",\n  transform: \"translate(-50 %, -50 %)\"\n});\n\nconst SwipeableArea = css({\n  position: \"fixed\",\n  bottom: 0,\n  left: 0,\n  right: \"45%\",\n  height: \"5rem\"\n});\n\ntype MusicPlayerProps = {\n  activeSong: Song;\n};\n\nclass MusicPlayer extends Component<MusicPlayerProps> {\n  state = {\n    progress: 0,\n    playerVisible: true\n  };\n\n  render() {\n    // const { duration_ms } = this.props.activeSong;\n    const isSongSet = !isObjectEmpty(this.props.activeSong);\n\n    return (\n      <div css={MusicPlayerStyling(this.state.playerVisible)}>\n        <Swipeable\n          css={SwipeableArea}\n          onSwipedUp={() => this.setState({ playerVisible: true })}\n          onSwipedDown={() => this.setState({ playerVisible: false })}\n        />\n        <Button\n          css={ShowButton}\n          type=\"primary\"\n          icon={this.state.playerVisible ? \"down-square\" : \"up-square\"}\n          onClick={() =>\n            this.setState({ playerVisible: !this.state.playerVisible })\n          }\n        />\n        {isSongSet && <ActiveSong activeSong={this.props.activeSong} />}\n        <SkipSongButton />\n      </div>\n    );\n  }\n}\n\nconst SkipSongButton = () => (\n  <ButtonContainer>\n    <Button\n      onClick={() => {\n        skipSong();\n      }}\n    >\n      SKIP SONG\n    </Button>\n  </ButtonContainer>\n);\n\ntype ActiveSongProps = {\n  activeSong: Song;\n};\n\nconst activeSong = css({\n  height: \"80%\",\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\"\n});\n\nclass ActiveSong extends Component<ActiveSongProps> {\n  render() {\n    return (\n      <div css={activeSong}>\n        <Avatar\n          size={50}\n          shape={\"square\"}\n          src={this.props.activeSong.thumbnail_url}\n        />\n        <div style={{ display: \"inline-block\", paddingLeft: \"0.5rem\" }}>\n          <div style={{ fontSize: \"0.9rem\", width: \"100%\" }}>\n            {this.props.activeSong.name}\n          </div>\n          <div style={{ fontSize: \"0.7rem\", width: \"100%\", color: \"#b3b3b3\" }}>\n            {this.props.activeSong.artists}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// Music player's dispatch to props and state to props\nconst mapStateToProps = (state: ReduxState) => {\n  return {\n    spotifySongs: state.spotifySongs,\n    activeSong: state.activeSong\n  };\n};\n\nexport const MusicPlayerContainer = connect(mapStateToProps)(MusicPlayer);\n","/** @jsx jsx */\n\nimport { jsx, css } from \"@emotion/core\";\nimport { Input, notification, Form, Button, Switch } from \"antd\";\nimport React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { useState } from \"react\";\nimport { FormComponentProps } from \"antd/lib/form\";\nimport { store } from \"../../Stores/index\";\nimport { Song, SongReadiness } from \"../../Actions/types\";\nimport { addSongsToQueue, scheduleSong } from \"../../Actions/index\";\n\nconst SearchContainer = styled.div({\n  margin: \"auto\",\n  width: \"95%\"\n});\n\nconst SearchForm = css({\n  paddingTop: \"0.7rem\"\n});\n\nexport const YoutubeSearch = () => {\n  return (\n    <SearchContainer>\n      <SongSearchForm />\n    </SearchContainer>\n  );\n};\n\ntype SongSearchProps = {};\ntype FormValues = {\n  artists: string;\n  songName: string;\n  nsfw: boolean;\n};\n\nconst SongSearch = (props: SongSearchProps & FormComponentProps) => {\n  const { getFieldDecorator } = props.form;\n  // flag to stop form for a second after submit\n  const [disabled, setDisabled] = useState(false);\n\n  return (\n    <Form\n      css={SearchForm}\n      onSubmit={e => {\n        // validate form and prevent default from refreshing the page\n        e.preventDefault();\n        props.form.validateFields((err, values: FormValues) => {\n          if (!err) {\n            // clear form\n            props.form.resetFields();\n            // create new song, so we can use logic used in normal queue\n            const song: Song = {\n              id: \"none\",\n              name: values.songName,\n              artists: values.artists,\n              formatted_name: `${values.artists} - ${values.songName}`,\n              duration: 0,\n              thumbnail_url: \"none\",\n              isReady: SongReadiness.NOT_READY,\n              nsfw: values.nsfw\n            };\n\n            // schedule song and add it to queue\n            scheduleSong(song);\n            // turn off form for a second, so user won't spam it\n            setDisabled(true);\n            setTimeout(() => {\n              setDisabled(false);\n              notification.info({\n                message: \"Searching song on youtube...\",\n                description: song.formatted_name\n              });\n            }, 500);\n          }\n        });\n      }}\n    >\n      <Form.Item required={true}>\n        {getFieldDecorator(\"artists\", {\n          rules: [\n            { required: true, message: \"Please specify atleast one artist!\" }\n          ]\n        })(<Input placeholder=\"artists...\" />)}\n      </Form.Item>\n      <Form.Item>\n        {getFieldDecorator(\"songName\", {\n          rules: [\n            {\n              required: true,\n              message: \"how can I play a song if I don't know its name?\"\n            }\n          ]\n        })(<Input placeholder=\"song name...\" />)}\n      </Form.Item>\n      <Form.Item label=\"nsfw\">\n        {getFieldDecorator(\"nsfw\", {\n          rules: [\n            {\n              required: true,\n              message: \"how can I play a song if I don't know its name?\"\n            }\n          ],\n          initialValue: true\n        })(<Switch defaultChecked />)}\n      </Form.Item>\n      <Form.Item required={true}>\n        <Button loading={disabled} type=\"primary\" htmlType=\"submit\">\n          Search\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nconst SongSearchForm = Form.create({})(SongSearch);\n","/** @jsx jsx */\n\nimport { jsx, css } from \"@emotion/core\";\nimport { Input, InputNumber, Form, Button, Switch } from \"antd\";\nimport React, { FunctionComponent } from \"react\";\nimport styled from \"@emotion/styled\";\nimport { useState } from \"react\";\nimport { FormComponentProps } from \"antd/lib/form\";\nimport { Config as ConfigValues } from \"../../Actions/types\";\nimport { updateConfig } from \"../../Functions\";\n\nconst FormContainer = styled.div({\n  margin: \"auto\",\n  width: \"95%\"\n});\n\nexport const Config: FunctionComponent = () => {\n  return (\n    <FormContainer>\n      <ConfigForm />\n    </FormContainer>\n  );\n};\n\nconst SearchForm = css({\n  paddingTop: \"0.7rem\"\n});\n\ntype SongSearchProps = {};\ntype FormValues = {\n  frequency: number;\n};\n\nconst ConfigFormComponent = (props: SongSearchProps & FormComponentProps) => {\n  const { getFieldDecorator } = props.form;\n  // flag to stop form for a second after submit\n  const [disabled, setDisabled] = useState(false);\n\n  return (\n    <Form\n      css={SearchForm}\n      onSubmit={e => {\n        // validate form and prevent default from refreshing the page\n        e.preventDefault();\n        props.form.validateFields((err, values: ConfigValues) => {\n          if (!err) {\n            updateConfig(values);\n            // clear form\n            props.form.resetFields();\n            // create new song, so we can use logic used in normal queue\n          }\n        });\n      }}\n    >\n      <Form.Item label={\"frequency\"} required={true}>\n        {getFieldDecorator(\"frequency\", {\n          rules: [\n            {\n              required: true,\n              message: \"Please specify atleast one artist!\",\n              min: 87.6,\n              max: 105.0,\n              type: \"number\"\n            }\n          ]\n        })(<InputNumber step={0.1} min={87.6} max={105.0} />)}\n      </Form.Item>\n      <Form.Item required={true}>\n        <div>Changes will take place after currently played song</div>\n        <Button loading={disabled} type=\"primary\" htmlType=\"submit\">\n          Save\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nconst ConfigForm = Form.create({})(ConfigFormComponent);\n","/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\n\nimport React, { Component, FunctionComponent, useEffect } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Provider, connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { store, ReduxState } from \"./Stores/index\";\nimport { saveToken, getTokenFromLocalStorage } from \"./Actions/index\";\nimport { Token, TokenStatus } from \"./Actions/types\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport {\n  MusicPlayer,\n  AuthRedirection as AuthRedirectionComponent,\n  YoutubeSearch,\n  SongList,\n  Config\n} from \"./Components/Containers/index\";\nimport { fetchSpotifyData } from \"./Functions\";\nimport { MainMenu } from \"./Components/Presentational/index\";\nimport styled from \"styled-components\";\ninterface AppProps extends RouteComponentProps {\n  getTokenFromLocalStorage: () => void;\n  socketConnected: boolean;\n  token: Token;\n}\n\nconst Container = styled.div({\n  background: \"#fff\"\n});\n\nexport const App: FunctionComponent<AppProps> = props => {\n  useEffect(() => {\n    props.getTokenFromLocalStorage();\n    if (\n      props.token.status !== TokenStatus.EXPIRED &&\n      props.token.value !== undefined\n    ) {\n      fetchSpotifyData();\n    }\n    props.history.push(\"/songs/available\");\n  }, [props.token.value]);\n  return (\n    <div className=\"App-header\">\n      <MainMenu />\n      <Container>\n        <Switch>\n          <Route exact path=\"/auth\" component={AuthRedirection} />\n          <Route path=\"/songs\" component={SongList} />\n          <Route path=\"/youtube_search\" component={YoutubeSearch} />\n          <Route path=\"/config\" component={Config} />\n        </Switch>\n      </Container>\n      {props.socketConnected && <MusicPlayer />}\n    </div>\n  );\n};\n\nclass Root extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <Route path=\"/\" component={AppCore} />\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nconst mapStateToProps = (state: ReduxState) => {\n  return {\n    token: state.token,\n    socketConnected: state.websocketConnected\n  };\n};\n\n// DTP - dispatch to props\nconst appDTP = (dispatch: Dispatch) => {\n  return {\n    getTokenFromLocalStorage: () => {\n      dispatch(getTokenFromLocalStorage());\n    }\n  };\n};\n\nconst AppCore = connect(\n  mapStateToProps,\n  appDTP\n)(App);\n\n// DTP - dispatch to props\n\nconst authRedirectionDTP = (dispatch: Dispatch) => {\n  return {\n    saveToken: (token: string) => {\n      dispatch(saveToken(token));\n    }\n  };\n};\n\nconst AuthRedirection = connect(\n  mapStateToProps,\n  authRedirectionDTP\n)(AuthRedirectionComponent);\n\nexport default Root;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Root from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { notification } from \"antd\";\n// configure antd notification, set it to the bottom right\nnotification.config({\n  placement: \"topRight\",\n  bottom: -5\n});\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}